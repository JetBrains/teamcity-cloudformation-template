AWSTemplateFormatVersion: "2010-09-09"

Description:
  This template deploys a high available TeamCity installation including main and readonly server nodes and build agent of the specified version from DockerHub.

Parameters:
    TeamCityVersion:
        Description: TeamCity Version
        Type: String
        AllowedPattern: ".+"
        Default: latest

    KeyName:
        Description: The existing EC2 KeyPair for SSH access to the EC2 instance running container with TeamCity server and agents
        Type: AWS::EC2::KeyPair::KeyName
        AllowedPattern: ".+"

    InternetFacingStack:
      Description: Make TeamCity server accessible from internet.
      Type: String
      Default: false
      AllowedValues: [true, false]

    ServerContainerCpu:
        Type: Number
        Default: 1024
        Description: How much CPU to give the container running TeamCity server. 1024 is 1 CPU

    ServerContainerMemory:
        Type: Number
        Default: 3700
        Description: How much memory in megabytes to give the container running TeamCity server

    ServerInstanceType:
        Description: The instance type for the EC2 instance running container with TeamCity Server
        Type: String
        Default: c5.large
        AllowedValues:
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5.12xlarge
          - m5.24xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m4.10xlarge
          - m4.16xlarge
          - m4.large
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5.9xlarge
          - c5.18xlarge
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r4.8xlarge
          - r4.16xlarge

    DBInstanceType:
            Description: The instance type for the RDS instance for TeamCity Database
            Type: String
            Default: db.t2.medium
            AllowedValues:
              - db.t2.medium
              - db.m4.large
              - db.m4.xlarge
              - db.m4.2xlarge
              - db.m4.4xlarge
              - db.m4.10xlarge
              - db.m3.medium
              - db.m3.large
              - db.m3.xlarge
              - db.m3.2xlarge
              - db.r3.large
              - db.r3.xlarge
              - db.r3.2xlarge
              - db.r3.4xlarge
              - db.r3.8xlarge

    DBPassword:
        Description: Provide the password for the TeamCity RDS Database (min 8, maximum 41 characters)
        Type: String
        AllowedPattern: ".+"
        MinLength: 8
        NoEcho: true

    AgentInstanceType:
        Description: The instance type for the EC2 instance running container with TeamCity Build Agent
        Type: String
        Default: t2.medium
        AllowedValues:
          - t2.small
          - t2.medium
          - t2.large
          - t2.xlarge
          - t2.2xlarge
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - m5.12xlarge
          - m5.24xlarge
          - m4.large
          - m4.xlarge
          - m4.2xlarge
          - m4.4xlarge
          - m4.10xlarge
          - m4.16xlarge
          - m4.large
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - c5.9xlarge
          - c5.18xlarge
          - c4.large
          - c4.xlarge
          - c4.2xlarge
          - c4.4xlarge
          - c4.8xlarge
          - r4.large
          - r4.xlarge
          - r4.2xlarge
          - r4.4xlarge
          - r4.8xlarge
          - r4.16xlarge

    AgentNumber:
      Type: Number
      Default: 1
      Description: Number of build agents to start. Set '0' to start TeamCity server without build agents connected.

    AgentContainerCpu:
      Type: Number
      Default: 1024
      Description: How much CPU to give the container running TeamCity build agent. 1024 is 1 CPU

    AgentContainerMemory:
      Type: Number
      Default: 2048
      Description: How much memory in megabytes to give the container running TeamCity build agent

    CertificateDomainName:
      Type: String
      Description: Fully Qualified Domain Name (FQDN) of the certificate. Email validation will start. Leave empty to not setup SSL access to the server.
      AllowedPattern: ^$|^(\*\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$

    SshAccessSourceIPRange:
      Type: String
      Description: An IPv4 CIDR range to allow external SSH access from. Leave empty to deny SSH access.
      AllowedPattern: ^$|([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
      ConstraintDescription: Should be valid CIDR

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label:
              default: ""
            Parameters:
              - TeamCityVersion
              - InternetFacingStack
              - KeyName
              - CertificateDomainName
              - SshAccessSourceIPRange
          - Label:
              default: "TeamCity Server"
            Parameters:
              - ServerInstanceType
              - ServerContainerCpu
              - ServerContainerMemory
          - Label:
              default: "Database"
            Parameters:
              - DBInstanceType
              - DBPassword
          - Label:
              default: "Build Agents"
            Parameters:
              - AgentNumber
              - AgentInstanceType
              - AgentContainerCpu
              - AgentContainerMemory
        ParameterLabels:
          ServerInstanceType:
            default: "EC2 Instance Type"
          AgentInstanceType:
            default: "EC2 Instance Type"
          InternetFacingStack:
            default: "Internet-Facing Stack"
          KeyName:
            default: "EC2 KeyPair (required)"
          TeamCityVersion:
            default: "TeamCity Version"
          DBInstanceType:
            default: "RDS Database Instance Type"
          DBPassword:
            default: "TeamCity Database Password (required)"
          ServerContainerMemory:
            default: "Container Memory (MiB)"
          AgentContainerMemory:
            default: "Container Memory (MiB)"
          ServerContainerCpu:
            default: "Container CPU (unit)"
          AgentContainerCpu:
            default: "Container CPU (unit)"
          AgentNumber:
            default: "Agents Number"
          CertificateDomainName:
            default: "SSL Certificate Domain"
          SshAccessSourceIPRange:
            default: "Allow SSH From"

Mappings:

  AWSRegionToAMI:
        eu-central-1:
            AMI: ami-9fc39c74
        ap-northeast-1:
            AMI: ami-a99d8ad5
        ap-northeast-2:
            AMI: ami-9d56f9f3
        ca-central-1:
            AMI: ami-897ff9ed
        ap-south-1:
            AMI: ami-72edc81d
        sa-east-1:
            AMI: ami-4a7e2826
        ap-southeast-2:
            AMI: ami-efda148d
        ap-southeast-1:
            AMI: ami-846144f8
        us-east-1:
            AMI: ami-aff65ad2
        us-east-2:
            AMI: ami-64300001
        us-west-2:
            AMI: ami-40ddb938
        us-west-1:
            AMI: ami-69677709
        eu-west-1:
            AMI: ami-2d386654
        eu-west-2:
            AMI: ami-2218f945
        eu-west-3:
            AMI: ami-250eb858

  AWSRegionToAMIBastion:
        ap-northeast-1:
            AMZNLINUXHVM: ami-92df37ed
        ap-northeast-2:
            AMZNLINUXHVM: ami-c10fa6af
        ap-south-1:
            AMZNLINUXHVM: ami-76d6f519
        ap-southeast-1:
           AMZNLINUXHVM: ami-de90a5a2
        ap-southeast-2:
           AMZNLINUXHVM: ami-423bec20
        ca-central-1:
            AMZNLINUXHVM: ami-338a0a57
        eu-central-1:
            AMZNLINUXHVM: ami-9a91b371
        eu-west-1:
            AMZNLINUXHVM: ami-ca0135b3
        eu-west-2:
           AMZNLINUXHVM: ami-a36f8dc4
        eu-west-3:
           AMZNLINUXHVM: ami-969c2deb
        sa-east-1:
            AMZNLINUXHVM: ami-3885d854
        us-east-1:
            AMZNLINUXHVM: ami-14c5486b
        us-east-2:
            AMZNLINUXHVM: ami-922914f7
        us-west-1:
            AMZNLINUXHVM: ami-25110f45
        us-west-2:
            AMZNLINUXHVM: ami-e251209a

Conditions:

  IsInternetFacingStack:
    !Equals [true, !Ref InternetFacingStack]

  ShouldLaunchAgents:
    !Not [!Equals [0, !Ref AgentNumber]]

  ShouldRequestCertificate:
    !Not [!Equals ['', !Ref CertificateDomainName]]

  EnableExternalSshAccess:
    !Not [!Equals ['', !Ref SshAccessSourceIPRange]]

Resources:

  VPC:
      Type: AWS::EC2::VPC
      Properties:
          CidrBlock: 10.0.0.0/16
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity-${AWS::StackName}

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Sub TeamCity-${AWS::StackName}

  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC

  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId:
        Fn::GetAtt:
        - NatGatewayEIP1
        - AllocationId
      Tags:
        - Key: Name
          Value: !Sub TeamCity-${AWS::StackName}

  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          CidrBlock: 10.0.0.0/24
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Subnet (AZ1)

  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Subnet (AZ2)

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Public Routes

  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs "" ]
          CidrBlock: 10.0.2.0/24
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Subnet (AZ1)

  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs "" ]
          CidrBlock: 10.0.3.0/24
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Subnet (AZ2)

  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Routes (AZ1)

  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub TeamCity ${AWS::StackName} Private Routes (AZ2)

  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2

  NatGatewayRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  NatGatewayRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public access
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
        - CidrIp: 0.0.0.0/0
          IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80

  AllAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows incoming traffic of any type. !! Use for troubleshooting only !!
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Frontends
      VpcId: !Ref 'VPC'

  FrontendSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Fn::GetAtt:
        - FrontendSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - FrontendSecurityGroup
        - GroupId
      IpProtocol: "-1"

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Backends
      VpcId: !Ref 'VPC'

  BackendSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      SourceSecurityGroupId:
        Fn::GetAtt:
        - BackendSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - BackendSecurityGroup
        - GroupId
      IpProtocol: "-1"

  FrontendAccessIngress:
      Type: 'AWS::EC2::SecurityGroupIngress'
      Properties:
        SourceSecurityGroupId:
          Fn::GetAtt:
          - FrontendSecurityGroup
          - GroupId
        GroupId:
          Fn::GetAtt:
          - BackendSecurityGroup
          - GroupId
        IpProtocol: "-1"

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !If [IsInternetFacingStack, 'internet-facing', 'internal']
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicAccessSG
        - !Ref FrontendSecurityGroup

  TCMainNodeLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref BackendSecurityGroup

  TCRONodeLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref BackendSecurityGroup

  FrontendTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /haproxy_status
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: '10'
        Matcher:
          HttpCode: "200"
        Port: 80
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref 'VPC'

  MainServerNodeTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 6
        HealthCheckPath: /login.html
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 5
        HealthyThresholdCount: 2
        TargetGroupAttributes:
          - Key: deregistration_delay.timeout_seconds
            Value: '10'
        Matcher:
          HttpCode: "200,302"
        Port: 8111
        Protocol: HTTP
        TargetType: instance
        VpcId: !Ref 'VPC'

  ReadonlyServerNodeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /login.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '10'
      Matcher:
        HttpCode: "200,302"
      Port: 8111
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref 'VPC'

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  FrontendLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
          - '*'
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  TCMainNodeLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref MainServerNodeTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref TCMainNodeLoadBalancer
      Port: 80
      Protocol: HTTP

  TCMainNodeLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref MainServerNodeTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
          - '*'
      ListenerArn: !Ref TCMainNodeLoadBalancerListener
      Priority: 1

  TCRONodeLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ReadonlyServerNodeTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref TCRONodeLoadBalancer
      Port: 80
      Protocol: HTTP

  TCRONodeLoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref ReadonlyServerNodeTargetGroup
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values:
          - '*'
      ListenerArn: !Ref TCRONodeLoadBalancerListener
      Priority: 1

  ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
          ClusterName: !Ref AWS::StackName

  FrontendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref "FrontendLaunchConfiguration"
      MinSize: "1"
      MaxSize: "3"
      DesiredCapacity: "2"
      Tags:
        - Key: teamcity.node-responsibility
          Value: frontend
          PropagateAtLaunch: true

  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - EfsMountTarget1
      - EfsMountTarget2
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref "BackendLaunchConfiguration"
      MinSize: "2"
      MaxSize: "2"
      DesiredCapacity: "2"
      Tags:
        - Key: teamcity.node-responsibility
          Value: backend
          PropagateAtLaunch: true

  AgentAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: ShouldLaunchAgents
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref "AgentLaunchConfiguration"
      MinSize: !Ref AgentNumber
      MaxSize: !Ref AgentNumber
      DesiredCapacity: !Ref AgentNumber
      Tags:
        - Key: teamcity.node-responsibility
          Value: buildAgent
          PropagateAtLaunch: true

  FrontendLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region' , "AMI" ]
      KeyName: !Ref 'KeyName'
      InstanceType: 't2.medium'
      SecurityGroups:
        - !Ref FrontendSecurityGroup
        - !Ref SshAccessSecurityGroup
      IamInstanceProfile: !Ref ECSNodeInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          echo ECS_INSTANCE_ATTRIBUTES={\"teamcity.node-responsibility\": \"frontend\"} >> /etc/ecs/ecs.config
          mkdir -p /etc/haproxy
          touch /etc/haproxy/haproxy.cfg
          tee /etc/haproxy/haproxy.cfg <<EOF
          global
              daemon
              log 127.0.0.1 local0 info
              maxconn 10000
          resolvers dns
              nameserver awsdns 10.0.0.2:53
              resolve_retries       3
              timeout resolve       1s
              timeout retry         1s
          defaults
              log global
              mode http
              timeout connect 240s
              timeout server 1200s
              timeout client 60s
          frontend http-in
              bind *:80
              monitor-uri /haproxy_status
              acl is_ha_request_url_param urlp(tcnodetype) ha
              acl is_ha_request_cookie hdr_sub(cookie) TCNODETYPE=ha
              acl is_ro_node_request_url_param urlp(tcnodetype) ro
              acl is_ro_node_request_cookie hdr_sub(cookie) TCNODETYPE=ro
              acl is_main_node_request_url_param urlp(tcnodetype) main
              acl is_main_node_request_cookie hdr_sub(cookie) TCNODETYPE=main
              use_backend tc-ha if is_ha_request_url_param
              use_backend tc-main if is_main_node_request_url_param
              use_backend tc-ro if is_ro_node_request_url_param
              use_backend tc-ha if is_ha_request_cookie
              use_backend tc-main if is_main_node_request_cookie
              use_backend tc-ro if is_ro_node_request_cookie
              default_backend tc-ha
          backend tc-ha
              option httpchk GET /login.html
              cookie TCNODETYPE insert
          	  default-server inter 2s fall 2 rise 2
              server tc_main_node \$TC_MAIN_NODE_URL:80 check resolvers dns cookie ha
              server tc_ro_node \$TC_RO_NODE_URL:80 backup check resolvers dns cookie ha
          backend tc-main
              cookie TCNODETYPE insert
              default-server inter 2s fall 2 rise 2
              server tc_main_node \$TC_MAIN_NODE_URL:80 check resolvers dns cookie main
          backend tc-ro
              cookie TCNODETYPE insert
              default-server inter 2s fall 2 rise 2
              server tc_ro_node \$TC_RO_NODE_URL:80 check resolvers dns cookie ro
          EOF

  BackendLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region' , "AMI" ]
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref ServerInstanceType
      SecurityGroups:
        - !Ref BackendSecurityGroup
        - !Ref SshAccessSecurityGroup
      IamInstanceProfile: !Ref ECSNodeInstanceProfile
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
           echo ECS_INSTANCE_ATTRIBUTES={\"teamcity.node-responsibility\": \"backend\"} >> /etc/ecs/ecs.config
           sudo yum install -y amazon-efs-utils
           sudo mkdir /mnt/efs
           sudo mount -t efs ${FileSystem}:/ /mnt/efs
           service docker stop
           service docker start

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: ShouldLaunchAgents
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region' , "AMI" ]
      KeyName: !Ref 'KeyName'
      InstanceType: !Ref AgentInstanceType
      SecurityGroups:
        - !Ref SshAccessSecurityGroup
      IamInstanceProfile: !Ref ECSNodeInstanceProfile
      UserData:
              Fn::Base64: !Sub |
                 #!/bin/bash
                 echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                 echo ECS_INSTANCE_ATTRIBUTES={\"teamcity.node-responsibility\": \"buildAgent\"} >> /etc/ecs/ecs.config

  ECSNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ECSNodeInstanceRole

  ECSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PublicLoadBalancer
    Properties:
      PlacementConstraints:
        - Type: memberOf
          Expression: attribute:teamcity.node-responsibility == frontend
      Volumes:
        - Name: haproxy-config
          Host:
            SourcePath: /etc/haproxy
      ContainerDefinitions:
        - Name: 'haproxy'
          Image: 'haproxy:1.8.8'
          Cpu: 1024
          Memory: 2400
          Essential: true
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: TC_MAIN_NODE_URL
              Value: !GetAtt [TCMainNodeLoadBalancer, DNSName]
            - Name: TC_RO_NODE_URL
              Value: !GetAtt [TCRONodeLoadBalancer, DNSName]
          MountPoints:
            - ContainerPath: /usr/local/etc/haproxy
              SourceVolume: haproxy-config
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'aws/ecs/frontend'

  MainServerNodeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      PlacementConstraints:
        - Type: memberOf
          Expression: attribute:teamcity.node-responsibility == backend
      Volumes:
        - Name: data
          Host:
            SourcePath: /mnt/efs
        - Name: logs
          Host:
            SourcePath: /mnt/data/logs/teamcity
        - Name: temp
          Host:
            SourcePath: /mnt/data/temp/teamcity
      ContainerDefinitions:
        - Name: 'teamcity-server'
          User: root
          Image: !Join [':', ['jetbrains/teamcity-server', !Ref 'TeamCityVersion']]
          Cpu: !Ref ServerContainerCpu
          Memory: !Ref ServerContainerMemory
          Essential: true
          Command:
            - "/bin/bash"
            - "-c"
            - !Sub
              - "if [ ! -f /data/teamcity_server/datadir/lib/jdbc ]; then mkdir -p /data/teamcity_server/datadir/lib/jdbc; curl -o /data/teamcity_server/datadir/lib/jdbc/mysql-connector-java-bin.jar https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar; fi; if [ ! -f /data/teamcity_server/datadir/config/database.properties ]; then mkdir -p /data/teamcity_server/datadir/config; echo connectionProperties.user=teamcity > /data/teamcity_server/datadir/config/database.properties; echo connectionProperties.password='${RDSPassword}' >> /data/teamcity_server/datadir/config/database.properties; echo connectionUrl=jdbc:mysql://${RDSAddress}/teamcitydb >> /data/teamcity_server/datadir/config/database.properties; fi; if [ ! -f /data/teamcity_server/datadir/plugins ]; then mkdir -p /data/teamcity_server/datadir/plugins; curl -o /data/teamcity_server/datadir/plugins/aws-ecs.zip https://teamcity.jetbrains.com/guestAuth/app/rest/builds/buildType:TestDrive_TeamCityAmazonEcsPlugin_Build20172x,tag:release/artifacts/content/aws-ecs.zip; fi; echo 'docker-ubuntu-aws' > /opt/teamcity/webapps/ROOT/WEB-INF/DistributionType.txt; exec /run-services.sh;"
              - {
                  RDSAddress: !GetAtt [RDSDB, Endpoint.Address],
                  RDSPassword: !Ref 'DBPassword'
                }
          Environment:
            - Name: TEAMCITY_SERVER_MEM_OPTS
              Value: !Sub
                - "-Xmx${ServerMemory}m -XX:MaxPermSize=270m -XX:ReservedCodeCacheSize=350m"
                - {
                    ServerMemory: !GetAtt [ServerMemory, Value]
                  }
          MountPoints:
            - ContainerPath: /data/teamcity_server/datadir
              SourceVolume: data
            - ContainerPath: /opt/teamcity/logs
              SourceVolume: logs
            - ContainerPath: /opt/teamcity/temp
              SourceVolume: temp
          PortMappings:
            - ContainerPort: 8111
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'aws/ecs/teamcity-server'

  ReadonlyServerNodeTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      PlacementConstraints:
        - Type: memberOf
          Expression: attribute:teamcity.node-responsibility == backend
      Volumes:
        - Name: data_main
          Host:
            SourcePath: /mnt/efs
        - Name: data_ro
          Host:
            SourcePath: /mnt/data/teamcity_ro
        - Name: logs
          Host:
            SourcePath: /mnt/data/logs/teamcity
        - Name: temp
          Host:
            SourcePath: /mnt/data/temp/teamcity
      ContainerDefinitions:
        - Name: 'teamcity-server'
          Image: !Join [':', ['jetbrains/teamcity-server', !Ref 'TeamCityVersion']]
          Cpu: !Ref ServerContainerCpu
          Memory: !Ref ServerContainerMemory
          Essential: true
          Command:
            - "/bin/bash"
            - "-c"
            - !Sub
              - "if [ ! -f /data/teamcity_server_ro/datadir/lib/jdbc ]; then mkdir -p /data/teamcity_server_ro/datadir/lib/jdbc; curl -o /data/teamcity_server_ro/datadir/lib/jdbc/mysql-connector-java-bin.jar https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.43/mysql-connector-java-5.1.43.jar; fi; if [ ! -f /data/teamcity_server_ro/datadir/config/database.properties ]; then mkdir -p /data/teamcity_server_ro/datadir/config; echo connectionProperties.user=teamcity > /data/teamcity_server_ro/datadir/config/database.properties; echo connectionProperties.password='${RDSPassword}' >> /data/teamcity_server_ro/datadir/config/database.properties; echo connectionUrl=jdbc:mysql://${RDSAddress}/teamcitydb >> /data/teamcity_server_ro/datadir/config/database.properties; fi; if [ ! -f /data/teamcity_server_ro/datadir/plugins ]; then mkdir -p /data/teamcity_server_ro/datadir/plugins; curl -o /data/teamcity_server_ro/datadir/plugins/aws-ecs.zip https://teamcity.jetbrains.com/guestAuth/app/rest/builds/buildType:TestDrive_TeamCityAmazonEcsPlugin_Build20172x,tag:release/artifacts/content/aws-ecs.zip; fi; echo 'docker-ubuntu-aws' > /opt/teamcity/webapps/ROOT/WEB-INF/DistributionType.txt; exec /run-services.sh;"
              - {
                  RDSAddress: !GetAtt [RDSDB, Endpoint.Address],
                  RDSPassword: !Ref 'DBPassword'
                }
          Environment:
            - Name: TEAMCITY_SERVER_OPTS
              Value: -Dteamcity.server.nodeSpecificDataPath=/data/teamcity_server_ro/datadir -Dteamcity.server.role=read-only-server
            - Name: TEAMCITY_SERVER_MEM_OPTS
              Value: !Sub
                - "-Xmx${ServerMemory}m -XX:MaxPermSize=270m -XX:ReservedCodeCacheSize=350m"
                - {
                    ServerMemory: !GetAtt [ServerMemory, Value]
                  }
          MountPoints:
            - ContainerPath: /data/teamcity_server/datadir
              SourceVolume: data_main
            - ContainerPath: /data/teamcity_server_ro/datadir
              SourceVolume: data_ro
            - ContainerPath: /opt/teamcity/logs
              SourceVolume: logs
            - ContainerPath: /opt/teamcity/temp
              SourceVolume: temp
          PortMappings:
            - ContainerPort: 8111
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'aws/ecs/teamcity-server'

  AgentTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Condition: ShouldLaunchAgents
      DependsOn:
        - MainServerNodeService
      Properties:
        PlacementConstraints:
          - Type: memberOf
            Expression: attribute:teamcity.node-responsibility == buildAgent
        ContainerDefinitions:
          - Name: 'teamcity-agent'
            User: root
            Image: !Join [':', ['jetbrains/teamcity-agent', !Ref 'TeamCityVersion']]
            Cpu: !Ref AgentContainerCpu
            Memory: !Ref AgentContainerMemory
            Essential: true
            Environment:
              - Name: SERVER_URL
                Value: !GetAtt [PublicLoadBalancer, DNSName]
            LogConfiguration:
              LogDriver: 'awslogs'
              Options:
                awslogs-group: !Ref ECSLogGroup
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: 'aws/ecs/teamcity-agent'

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn:
      - FrontendAutoScalingGroup
      - PublicLoadBalancer
    Properties:
      ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'Frontend']]
      Cluster:
        Ref: ECSCluster
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 600
      TaskDefinition:
        Ref: "FrontendTaskDefinition"
      PlacementStrategies:
        - Type: "spread"
          Field: "attribute:ecs.availability-zone"
      LoadBalancers:
        - ContainerName: 'haproxy'
          ContainerPort: 80
          TargetGroupArn:
            Ref: FrontendTargetGroup

  MainServerNodeService:
    Type: AWS::ECS::Service
    DependsOn:
      - BackendAutoScalingGroup
      - PublicLoadBalancer
    Properties:
      ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'TeamCityServer', 'MainNode']]
      Cluster:
        Ref: ECSCluster
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 600
      TaskDefinition:
        Ref: "MainServerNodeTaskDefinition"
      PlacementStrategies:
        - Type: "spread"
          Field: "attribute:ecs.availability-zone"
      LoadBalancers:
        - ContainerName: 'teamcity-server'
          ContainerPort: 8111
          TargetGroupArn:
            Ref: MainServerNodeTargetGroup

  ReadonlyServerNodeService:
    Type: AWS::ECS::Service
    DependsOn:
      - BackendAutoScalingGroup
      - PublicLoadBalancer
      - MainServerNodeService
    Properties:
      ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'TeamCityServer', 'ReadonlyNode']]
      Cluster:
        Ref: ECSCluster
      LaunchType: EC2
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 600
      TaskDefinition:
        Ref: "ReadonlyServerNodeTaskDefinition"
      PlacementStrategies:
        - Type: "spread"
          Field: "attribute:ecs.availability-zone"
      LoadBalancers:
        - ContainerName: 'teamcity-server'
          ContainerPort: 8111
          TargetGroupArn:
            Ref: ReadonlyServerNodeTargetGroup

  AgentService:
    Type: AWS::ECS::Service
    Condition: ShouldLaunchAgents
    DependsOn:
      - AgentAutoScalingGroup
    Properties:
          ServiceName: !Join ['_', [!Ref 'AWS::StackName', 'TeamCityAgents']]
          Cluster:
            Ref: ECSCluster
          LaunchType: EC2
          DeploymentConfiguration:
            MaximumPercent: 100
            MinimumHealthyPercent: 0
          DesiredCount: !Ref AgentNumber
          TaskDefinition:
            Ref: "AgentTaskDefinition"

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  EfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: PrivateSubnet1
      SecurityGroups:
      - Ref: "EFSMountingTargetsSecurityGroup"

  EfsMountTarget2:
     Type: AWS::EFS::MountTarget
     Properties:
       FileSystemId:
         Ref: FileSystem
       SubnetId:
         Ref: PrivateSubnet2
       SecurityGroups:
       - Ref: "EFSMountingTargetsSecurityGroup"

  EFSMountingTargetsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the EFS
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId:
            Fn::GetAtt:
            - BackendSecurityGroup
            - GroupId

  SshAccessSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: SSH access SG
          VpcId: !Ref 'VPC'
          SecurityGroupIngress:
            - IpProtocol: "tcp"
              FromPort: 22
              ToPort: 22
              CidrIp: "0.0.0.0/0"

  # RDS

  RDSDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: !Ref 'DBInstanceType'
      DBInstanceIdentifier: !Sub TeamCity-${AWS::StackName}
      DBName: 'teamcitydb'
      DBSubnetGroupName: !Ref 'RDSSubnetGroup'
      VPCSecurityGroups:
      - Ref: RDSSecurityGroup
      Engine: MySQL
      EngineVersion: 5.5.54
      MasterUsername: teamcity
      MasterUserPassword: !Ref 'DBPassword'
      DBParameterGroupName: !Ref 'RDSParamGroup'
      PubliclyAccessible: false
    DeletionPolicy: Snapshot

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPC'
      GroupDescription: !Sub TeamCity ${AWS::StackName} Database
      SecurityGroupIngress:
        - IpProtocol: "-1"
          SourceSecurityGroupId:
            Fn::GetAtt:
            - BackendSecurityGroup
            - GroupId

  RDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: MySQL5.5
      Description: !Sub TeamCity ${AWS::StackName} DB
      Parameters:
        long_query_time: "5"
        slow_query_log: "1"
        innodb_flush_log_at_trx_commit: "2"
        character_set_server: "utf8"
        collation_server: "utf8_bin"
        max_allowed_packet: "16777216"

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub TeamCity ${AWS::StackName} DB
      SubnetIds:
        - !Ref 'PrivateSubnet1'
        - !Ref 'PrivateSubnet2'

  #  Logging
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1

  #SSL support
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: ShouldRequestCertificate
    Properties:
      DomainName: !Ref 'CertificateDomainName'

  SecuredLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ShouldRequestCertificate
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FrontendTargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        - CertificateArn: !Ref Certificate

  # Utils
  ServerMemory:
    Type: Custom::ServerMemory
    Properties:
      ServiceToken: !GetAtt ServerMemoryFunction.Arn
      Region: !Ref "AWS::Region"
      Input: !Ref ServerContainerMemory

  ServerMemoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var response = require('cfn-response');
          exports.lambda_handler = function(event, context) {
            var input = parseInt(event.ResourceProperties.Input);
            var responseData = { Value: input / 2 };
            response.send(event, context, response.SUCCESS, responseData);
          }
      Handler: "index.lambda_handler"
      Runtime: nodejs12.x
      Timeout: 30
      Role: !GetAtt [ LambdaExecutionRole, Arn ]

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  #  SSH bastion host

  SshBastionHostPublicEIP:
    Type: AWS::EC2::EIP
    Condition: EnableExternalSshAccess
    Properties:
      Domain: vpc

  SshBastionAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: EnableExternalSshAccess
    Properties:
      GroupDescription: Access to SSH bastion host
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: !Ref SshAccessSourceIPRange
          IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22

  SshBastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EnableExternalSshAccess
    Properties:
      Path: "/"
      Roles:
        - !Ref SshBastionHostInstanceRole

  SshBastionHostInstanceRole:
    Type: AWS::IAM::Role
    Condition: EnableExternalSshAccess
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  SshBastionHostInstanceRolePolicies:
      Type: "AWS::IAM::Policy"
      Condition: EnableExternalSshAccess
      Properties:
        PolicyName: "root"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "ec2:ReleaseAddress"
                - "ec2:DisassociateAddress"
                - "ec2:DescribeAddresses"
                - "ec2:AssociateAddress"
              Resource: "*"
        Roles:
          - Ref: "SshBastionHostInstanceRole"

  SshBastionHostLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: EnableExternalSshAccess
    DependsOn: SshBastionHostPublicEIP
    Properties:
      # Amazon Linux AMI 2018.03.0 (HVM)
      ImageId: !FindInMap [ AWSRegionToAMIBastion, !Ref 'AWS::Region' , "AMZNLINUXHVM" ]
      KeyName: !Ref 'KeyName'
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref SshAccessSecurityGroup
        - !Ref SshBastionAccessSecurityGroup
      IamInstanceProfile: !Ref SshBastionHostInstanceProfile
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
           INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
           export AWS_DEFAULT_REGION=${AWS::Region}
           aws ec2 disassociate-address --association-id ${SshBastionHostPublicEIP.AllocationId}
           aws ec2 associate-address --instance-id $INSTANCE_ID --allocation-id ${SshBastionHostPublicEIP.AllocationId} --allow-reassociation

  SshBastionHostAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: EnableExternalSshAccess
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref "SshBastionHostLaunchConfiguration"
      MinSize: "1"
      MaxSize: "1"
      DesiredCapacity: !If [EnableExternalSshAccess, "1", "0"]
      Tags:
        - Key: teamcity.node-responsibility
          Value: ssh-bastion-host
          PropagateAtLaunch: true

Outputs:
  HATeamCityServerUrl:
    Description: High Available TeamCity Server URL
    Value: !Join ["", [ !If [ShouldRequestCertificate, "https://", "http://" ], !GetAtt [PublicLoadBalancer, DNSName], "/overview.html?tcnodetype=ha" ]]

  MainNodeUrl:
    Description: TeamCity Server Main Node URL
    Value: !Join ["", [ !If [ShouldRequestCertificate, "https://", "http://" ], !GetAtt [PublicLoadBalancer, DNSName], "/overview.html?tcnodetype=main" ]]

  ReadonlyNodeUrl:
    Description: TeamCity Server Readonly Node URL
    Value: !Join ["", [ !If [ShouldRequestCertificate, "https://", "http://" ], !GetAtt [PublicLoadBalancer, DNSName], "/overview.html?tcnodetype=ro" ]]

  SSHBastionHostIP:
    Description: SSH Bastion Host IP
    Value: !If [EnableExternalSshAccess, !Ref SshBastionHostPublicEIP, 'not provided']
